#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <stdint.h>
#define HASH_TABLE_SIZE 100


struct passenger {
    int id;
    char firstName[50];
    char lastName[50];
    char contactInfo[50];
    char passportNumber[20];
    struct passenger* next;
};

struct flight {
    int id;
    char flightNumber[20];
    char destination[50];
    char gate[10];
    char arrivalTime[20];
    char departureTime[20];
    struct flight *next;
};

struct employee {
    int id;
    char firstName[50];
    char lastName[50];
    char contactNumber[20];
    char email[50];
    char role[50];
    struct employee* next;
};

struct ticket {
    int ticketNumber;
    int passengerId;
    int flightId;
    char seatNumber[10];
    struct ticket* next;
};

struct airport {
    int id;
    char code[10];
    char name[50];
    char location[50];
    struct airport* next;
};

struct HashNode {
    void* key;
    void* data;
    struct HashNode* next;
};

// Hash table structure
struct HashTable {
    struct HashNode* array[HASH_TABLE_SIZE];
};

// Global hash tables for each entity
struct HashTable passengerTable;
struct HashTable flightTable;
struct HashTable employeeTable;
struct HashTable ticketTable;
struct HashTable airportTable;

// Function prototypes
unsigned int hashFunction(int key);
void initializeHashTable(struct HashTable* table);
void insertIntoHashTable(struct HashTable* table, int key, void* data);
void* findInHashTable(struct HashTable* table, int key);
void removeFromHashTable(struct HashTable* table, int key);
void freeHashTable(struct HashTable* table);

unsigned int hashFunction(int key) {
    return key % HASH_TABLE_SIZE;
}

// Initialize hash table
void initializeHashTable(struct HashTable* table) {
    for (int i = 0; i < HASH_TABLE_SIZE; i++) {
        table->array[i] = NULL;
    }
}

// Insert into hash table
void insertIntoHashTable(struct HashTable* table, int key, void* data) {
    unsigned int index = hashFunction(key);
    struct HashNode* newNode = (struct HashNode*)malloc(sizeof(struct HashNode));
    newNode->key = (void*)(intptr_t)key;
    newNode->data = data;
    newNode->next = table->array[index];
    table->array[index] = newNode;
}

// Find in hash table
void* findInHashTable(struct HashTable* table, int key) {
    unsigned int index = hashFunction(key);
    struct HashNode* current = table->array[index];
    while (current != NULL) {
        if ((int)(intptr_t)current->key == key) {
            return current->data;
        }
        current = current->next;
    }
    return NULL;
}

// Remove from hash table
void removeFromHashTable(struct HashTable* table, int key) {
    unsigned int index = hashFunction(key);
    struct HashNode *current = table->array[index], *prev = NULL;
    while (current != NULL && (int)(intptr_t)current->key != key) {
        prev = current;
        current = current->next;
    }
    if (current == NULL) return; // Key not found
    if (prev == NULL) {
        table->array[index] = current->next;
    } else {
        prev->next = current->next;
    }
    free(current);
}

// Free hash table
void freeHashTable(struct HashTable* table) {
    for (int i = 0; i < HASH_TABLE_SIZE; i++) {
        struct HashNode* current = table->array[i];
        while (current != NULL) {
            struct HashNode* temp = current;
            current = current->next;
            free(temp);
        }
    }
}


void* managePassengers(void* data);
void* manageFlights(void* data);
void* manageEmployees(void* data);
void* manageTickets(void* data);
struct passenger* findPassengerById(int id);




struct passenger* headPassenger = NULL;
struct flight* headFlight = NULL;
struct employee* headEmployee = NULL;
struct ticket* headTicket = NULL;
struct airport* headAirport = NULL;

void savePassengersToFile() {
    FILE *file = fopen("passengers.txt", "w");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }


    struct passenger *temp = headPassenger;
    while (temp != NULL) {
        fprintf(file, "ID=%d,FirstName=%s,LastName=%s,contactInfo=%s,passportNumber=%s\n", temp->id, temp->firstName, temp->lastName, temp->contactInfo, temp->passportNumber);
        temp = temp->next;
    }

    fclose(file);
    printf("Passengers data saved successfully.\n");
}

void loadPassengersFromFile() {
    FILE *file = fopen("passengers.txt", "r");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    struct passenger *lastPassenger = NULL;
    char line[256];

    while (fgets(line, sizeof(line), file)) {
        struct passenger *newPassenger = (struct passenger*)malloc(sizeof(struct passenger));
        if (newPassenger == NULL) {
            perror("Memory allocation error");
            continue;
        }

        sscanf(line, "ID=%d,FirstName=%49[^,],LastName=%49[^,],contactInfo=%49[^,],passportNumber=%19[^\n]", 
            &newPassenger->id, newPassenger->firstName, newPassenger->lastName, newPassenger->contactInfo, newPassenger->passportNumber);

        newPassenger->next = NULL;

        if (lastPassenger != NULL) {
            lastPassenger->next = newPassenger;
        } else {
            headPassenger = newPassenger;
        }

        lastPassenger = newPassenger;

        // Insert into hash table
        insertIntoHashTable(&passengerTable, newPassenger->id, newPassenger);
    }

    fclose(file);
}




void saveFlightsToFile() {
    FILE *file = fopen("flights.txt", "w");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    struct flight *temp = headFlight;
    while (temp != NULL) {
        fprintf(file, "id = %d,flightNumber =%s,destination = %s,gate = %s,arrivalTime = %s,departureTime = %s\n", temp->id, temp->flightNumber, temp->destination, temp->gate, temp->arrivalTime, temp->departureTime);
        temp = temp->next;
    }

    fclose(file);
}

void loadFlightsFromFile() {
    FILE *file = fopen("flights.txt", "r");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    struct flight *lastFlight = NULL;
    char line[256];

    while (fgets(line, sizeof(line), file)) {
        struct flight *newFlight = (struct flight*)malloc(sizeof(struct flight));
        if (newFlight == NULL) {
            perror("Memory allocation error");
            continue;
        }

        sscanf(line, "id = %d,flightNumber = %19[^,],destination = %49[^,],gate = %9[^,],arrivalTime = %19[^,],departureTime = %19[^\n]", &newFlight->id, newFlight->flightNumber, newFlight->destination, newFlight->gate, newFlight->arrivalTime, newFlight->departureTime);

        newFlight->next = NULL;

        if (lastFlight != NULL) {
            lastFlight->next = newFlight;
        } else {
            headFlight = newFlight;
        }

        lastFlight = newFlight;
        insertIntoHashTable(&flightTable, newFlight->id, newFlight);
    }

    fclose(file);
}

void saveEmployeesToFile() {
    FILE *file = fopen("employees.txt", "w");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    struct employee *temp = headEmployee;
    while (temp != NULL) {
        fprintf(file, "ID=%d,First Name=%s,Last Name=%s,Contact Number=%s,Email=%s,Role=%s\n", 
            temp->id, temp->firstName, temp->lastName, 
            temp->contactNumber, temp->email, temp->role);
        temp = temp->next;
    }

    fclose(file);
}


void loadEmployeesFromFile() {
    FILE *file = fopen("employees.txt", "r");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    struct employee *lastEmployee = NULL;
    char line[256];

    while (fgets(line, sizeof(line), file)) {
        struct employee *newEmployee = (struct employee*)malloc(sizeof(struct employee));
        if (newEmployee == NULL) {
            perror("Memory allocation error");
            continue;
        }

        sscanf(line, "ID=%d,First Name=%49[^,],Last Name=%49[^,],Contact Number=%19[^,],Email=%49[^,],Role=%49[^\n]",
               &newEmployee->id, newEmployee->firstName, newEmployee->lastName, 
               newEmployee->contactNumber, newEmployee->email, newEmployee->role);

        newEmployee->next = NULL;

        if (lastEmployee != NULL) {
            lastEmployee->next = newEmployee;
        } else {
            headEmployee = newEmployee;
        }

        lastEmployee = newEmployee;

        // Insert into hash table
        insertIntoHashTable(&employeeTable, newEmployee->id, newEmployee);
    }

    fclose(file);
}

void saveTicketsToFile() {
    FILE *file = fopen("tickets.txt", "w");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    struct ticket *temp = headTicket;
    while (temp != NULL) {
        fprintf(file, "ticketNumber=%d,passengerId=%d,flightId=%d,seatNumber=%s\n", temp->ticketNumber, temp->passengerId, temp->flightId, temp->seatNumber);
        temp = temp->next;
    }

    fclose(file);
}

void loadTicketsFromFile() {
    FILE *file = fopen("tickets.txt", "r");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    struct ticket *lastTicket = NULL;
    char line[256];

    while (fgets(line, sizeof(line), file)) {
        struct ticket *newTicket = (struct ticket*)malloc(sizeof(struct ticket));
        if (newTicket == NULL) {
            perror("Memory allocation error");
            continue;
        }

        sscanf(line, "ticketNumber=%d,passengerId=%d,flightId=%d,seatNumber=%9[^\n]", &newTicket->ticketNumber, &newTicket->passengerId, &newTicket->flightId, newTicket->seatNumber);

        newTicket->next = NULL;

        if (lastTicket != NULL) {
            lastTicket->next = newTicket;
        } else {
            headTicket = newTicket;
        }

        lastTicket = newTicket;
        insertIntoHashTable(&ticketTable, newTicket->ticketNumber, newTicket);
    }

    fclose(file);
}



void saveAirportsToFile() {
    FILE *file = fopen("airports.txt", "w");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    struct airport *temp = headAirport;
    while (temp != NULL) {
        fprintf(file, "id=%d,code=%s,name=%s,location=%s\n", temp->id, temp->code, temp->name, temp->location);
        temp = temp->next;
    }

    fclose(file);
}


void loadAirportsFromFile() {
    FILE *file = fopen("airports.txt", "r");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    struct airport *lastAirport = NULL;
    char line[256];

    while (fgets(line, sizeof(line), file)) {
        struct airport *newAirport = (struct airport*)malloc(sizeof(struct airport));
        if (newAirport == NULL) {
            perror("Memory allocation error");
            continue;
        }

        sscanf(line, "id=%d,code=%9[^,],name=%49[^,],location=%49[^\n]", &newAirport->id, newAirport->code, newAirport->name, newAirport->location);

        newAirport->next = NULL;

        if (lastAirport != NULL) {
            lastAirport->next = newAirport;
        } else {
            headAirport = newAirport;
        }

        lastAirport = newAirport;
        insertIntoHashTable(&airportTable, newAirport->id, newAirport);
    }

    fclose(file);
}



/*struct passenger* findPassengerById(int id) {
    struct passenger* temp = headPassenger;
    while (temp != NULL) {
        if (temp->id == id) {
            return temp;
        }
        temp = temp->next;
    }
    return NULL;
}*/

struct flight* findFlightById(int id) {
    struct flight* temp = headFlight;
    while (temp != NULL) {
        if (temp->id == id) {
            return temp;
        }
        temp = temp->next;
    }
    return NULL;
}

struct employee* findEmployeeById(int id) {
    FILE *file = fopen("employees.txt", "r");
    if (file == NULL) {
        perror("Error opening file");
        return NULL;
    }

    struct employee* temp = headEmployee;
    while (temp != NULL) {
        if (temp->id == id) {
            fclose(file);
            return temp;
        }
        temp = temp->next;
    }

    fclose(file);
    return NULL;
}


struct ticket* findTicketById(int ticketNumber) {
    struct ticket* temp = headTicket;
    while (temp != NULL) {
        if (temp->ticketNumber == ticketNumber) {
            return temp;
        }
        temp = temp->next;
    }
    return NULL;
}

struct airport* findAirportById(int id) {
    struct airport* temp = headAirport;
    while (temp != NULL) {
        if (temp->id == id) {
            return temp;
        }
        temp = temp->next;
    }
    return NULL;
}
///////////passengerFunctions\\\\\\\\\\\\\\/

struct passenger* findPassengerById(int id) {
    return (struct passenger*)findInHashTable(&passengerTable, id);
}
void addPassenger() {
    struct passenger *newPassenger = (struct passenger *)malloc(sizeof(struct passenger));
    if (newPassenger == NULL) {
        perror("Memory allocation error");
        return;
    }

    printf("\nEnter passenger ID: ");
    scanf("%d", &newPassenger->id);

    // Check if passenger already exists using hash table
    if (findInHashTable(&passengerTable, newPassenger->id) != NULL) {
        printf("Passenger with ID %d already exists.\n", newPassenger->id);
        free(newPassenger);
        return;
    }

    printf("Enter passenger first name: ");
    scanf(" %[^\n]s", newPassenger->firstName);  
    printf("Enter passenger last name: ");
    scanf(" %[^\n]s", newPassenger->lastName);
    printf("Enter contact info: ");
    scanf(" %[^\n]s", newPassenger->contactInfo);
    printf("Enter passport number: ");
    scanf(" %[^\n]s", newPassenger->passportNumber);

    // Insert into linked list
    newPassenger->next = headPassenger;
    headPassenger = newPassenger;

    // Insert into hash table
    insertIntoHashTable(&passengerTable, newPassenger->id, newPassenger);

    printf("\nPassenger added successfully.\n");
    savePassengersToFile();
}



 

void displayPassengers() {
    int choice, idSearch;
    char nameSearch[50];

    printf("Choose an option:\n");
    printf("1. Search by Name\n");
    printf("2. Search by ID\n");
    printf("3. Show All\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    if (choice == 1) {
        printf("Enter Name to search: ");
        scanf(" %[^\n]s", nameSearch); // Read a string with spaces
        struct passenger* temp = headPassenger;
        while (temp != NULL) {
            if (strstr(temp->firstName, nameSearch) != NULL || strstr(temp->lastName, nameSearch) != NULL) {
                printf("\nID: %d", temp->id);
                printf("\nFirst Name: %s", temp->firstName);
                printf("\nLast Name: %s", temp->lastName);
                printf("\nContact Info: %s", temp->contactInfo);
                printf("\nPassport Number: %s\n", temp->passportNumber);
            }
            temp = temp->next;
        }
    } else if (choice == 2) {
        printf("Enter ID to search: ");
        scanf("%d", &idSearch);
        struct passenger* foundPassenger = (struct passenger*)findInHashTable(&passengerTable, idSearch);
        if (foundPassenger != NULL) {
            printf("\nID: %d", foundPassenger->id);
            printf("\nFirst Name: %s", foundPassenger->firstName);
            printf("\nLast Name: %s", foundPassenger->lastName);
            printf("\nContact Info: %s", foundPassenger->contactInfo);
            printf("\nPassport Number: %s\n", foundPassenger->passportNumber);
        } else {
            printf("\nPassenger not found.\n");
        }
    } else if (choice == 3) {
        printf("\nPassenger List:\n");
        struct passenger* temp = headPassenger;
        while (temp != NULL) {
            printf("\nID: %d", temp->id);
            printf("\nFirst Name: %s", temp->firstName);
            printf("\nLast Name: %s", temp->lastName);
            printf("\nContact Info: %s", temp->contactInfo);
            printf("\nPassport Number: %s\n", temp->passportNumber);
            temp = temp->next;
        }
    } else {
        printf("\nInvalid choice.\n");
    }
}


void deletePassenger(int id) {
    // Search for the passenger by ID in the hash table
    struct passenger* foundPassenger = (struct passenger*)findInHashTable(&passengerTable, id);

    if (foundPassenger == NULL) {
        printf("Passenger with ID %d not found.\n", id);
        return;
    }

    // Remove the passenger from the linked list
    struct passenger* current = headPassenger;
    struct passenger* prev = NULL;

    while (current != NULL) {
        if (current->id == id) {
            if (prev == NULL) {
                // The passenger to be deleted is the head of the list
                headPassenger = current->next;
            } else {
                prev->next = current->next;
            }
            free(current);
            printf("Passenger with ID %d has been deleted.\n", id);
            break;
        }
        prev = current;
        current = current->next;
    }

    // Remove the passenger from the hash table
    removeFromHashTable(&passengerTable, id);
    savePassengersToFile(); // You can save the updated data to a file if needed
}

void updatePassenger(int id) {
    // Search for the passenger by ID in the hash table
    struct passenger* foundPassenger = (struct passenger*)findInHashTable(&passengerTable, id);

    if (foundPassenger == NULL) {
        printf("Passenger with ID %d not found.\n", id);
        return;
    }

    // Display the current information of the passenger
    printf("Current Information for Passenger with ID %d:\n", id);
    printf("First Name: %s\n", foundPassenger->firstName);
    printf("Last Name: %s\n", foundPassenger->lastName);
    printf("Contact Info: %s\n", foundPassenger->contactInfo);
    printf("Passport Number: %s\n", foundPassenger->passportNumber);

    // Ask the user what they want to update
    int choice;
    printf("\nSelect what you want to update:\n");
    printf("1. First Name\n");
    printf("2. Last Name\n");
    printf("3. Contact Info\n");
    printf("4. Passport Number\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            printf("Enter new First Name: ");
            scanf(" %[^\n]s", foundPassenger->firstName);
            break;
        case 2:
            printf("Enter new Last Name: ");
            scanf(" %[^\n]s", foundPassenger->lastName);
            break;
        case 3:
            printf("Enter new Contact Info: ");
            scanf(" %[^\n]s", foundPassenger->contactInfo);
            break;
        case 4:
            printf("Enter new Passport Number: ");
            scanf(" %[^\n]s", foundPassenger->passportNumber);
            break;
        default:
            printf("Invalid choice.\n");
            return;
    }

    // Save the changes to the file
    savePassengersToFile(); // You can implement this function to save the updated data
    printf("Passenger information updated successfully for ID %d.\n", id);
}

///////////FlightFunctions\\\\\\\\\\\\\\/

void addFlight() {
    
    printf("Adding a new flight...\n");
    struct flight *newFlight = (struct flight *)malloc(sizeof(struct flight));
    if (newFlight == NULL) {
        perror("Memory allocation error");
        return;
    }

    printf("\nEnter flight ID: ");
    scanf("%d", &newFlight->id);
    while (getchar() != '\n');  // Clear input buffer

    if (findInHashTable(&flightTable, newFlight->id) != NULL) {
        printf("Flight with ID %d already exists.\n", newFlight->id);
        free(newFlight);
        return;
    }

    printf("Enter flight number: ");
    scanf(" %[^\n]s", newFlight->flightNumber);
    while (getchar() != '\n');  // Clear input buffer

    printf("Enter destination: ");
    scanf(" %[^\n]s", newFlight->destination);
    while (getchar() != '\n');  // Clear input buffer

    printf("Enter gate: ");
    scanf(" %[^\n]s", newFlight->gate);
    while (getchar() != '\n');  // Clear input buffer

    printf("Enter arrival time: ");
    scanf(" %[^\n]s", newFlight->arrivalTime);
    while (getchar() != '\n');  // Clear input buffer

    printf("Enter departure time: ");
    scanf(" %[^\n]s", newFlight->departureTime);
    while (getchar() != '\n');  // Clear input buffer

    newFlight->next = headFlight;
    headFlight = newFlight;

    insertIntoHashTable(&flightTable, newFlight->id, newFlight);

    printf("\nFlight added successfully.\n");
     printf("addFlight function end\n");
    saveFlightsToFile();
}

void updateFlight(int id) {
    struct flight* foundFlight = (struct flight*)findInHashTable(&flightTable, id);

    if (foundFlight == NULL) {
        printf("Flight with ID %d not found.\n", id);
        return;
    }

    int choice;
    char input[50];

    while (1) {
        // Display current information
        printf("\nCurrent Information for Flight with ID %d:\n", id);
        printf("1. Flight Number: %s\n", foundFlight->flightNumber);
        printf("2. Destination: %s\n", foundFlight->destination);
        printf("3. Gate: %s\n", foundFlight->gate);
        printf("4. Arrival Time: %s\n", foundFlight->arrivalTime);
        printf("5. Departure Time: %s\n", foundFlight->departureTime);
        printf("6. Update All\n");
        printf("7. Finish updating\n");

        printf("\nSelect the attribute to update (1-7): ");
        scanf("%d", &choice);
        while (getchar() != '\n'); // Clear the input buffer

        if (choice >= 1 && choice <= 5 || choice == 6) {
            if (choice == 1 || choice == 6) {
                printf("Enter new flight number: ");
                scanf(" %[^\n]s", input);
                strcpy(foundFlight->flightNumber, input);
            }
            if (choice == 2 || choice == 6) {
                printf("Enter new destination: ");
                scanf(" %[^\n]s", input);
                strcpy(foundFlight->destination, input);
            }
            if (choice == 3 || choice == 6) {
                printf("Enter new gate: ");
                scanf(" %[^\n]s", input);
                strcpy(foundFlight->gate, input);
            }
            if (choice == 4 || choice == 6) {
                printf("Enter new arrival time: ");
                scanf(" %[^\n]s", input);
                strcpy(foundFlight->arrivalTime, input);
            }
            if (choice == 5 || choice == 6) {
                printf("Enter new departure time: ");
                scanf(" %[^\n]s", input);
                strcpy(foundFlight->departureTime, input);
            }
            if (choice == 6) {
                printf("All attributes updated.\n");
            }
        } else if (choice == 7) {
            printf("Finished updating flight information.\n");
            saveFlightsToFile(); // Save updated data to file
            return;
        } else {
            printf("Invalid choice, please try again.\n");
        }
    }
}


void displayFlights() {
    int choice, idSearch;
    char flightNumberSearch[20];

    printf("Choose an option:\n");
    printf("1. Search by Flight Number\n");
    printf("2. Search by ID\n");
    printf("3. Show All\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    if (choice == 1) {
        printf("Enter Flight Number to search: ");
        scanf(" %[^\n]s", flightNumberSearch); // Read a string with spaces
        struct flight* temp = headFlight;
        while (temp != NULL) {
            if (strcmp(temp->flightNumber, flightNumberSearch) == 0) {
                printf("\nID: %d", temp->id);
                printf("\nFlight Number: %s", temp->flightNumber);

                printf("\nDestination: %s", temp->destination);
                printf("\nGate: %s", temp->gate);
                printf("\nArrival Time: %s", temp->arrivalTime);
                printf("\nDeparture Time: %s\n", temp->departureTime);
            }
            temp = temp->next;
        }
    } else if (choice == 2) {
        printf("Enter ID to search: ");
        scanf("%d", &idSearch);
        struct flight* foundFlight = (struct flight*)findInHashTable(&flightTable, idSearch);
        if (foundFlight != NULL) {
            printf("\nID: %d", foundFlight->id);
            printf("\nFlight Number: %s", foundFlight->flightNumber);
            printf("\nDestination: %s", foundFlight->destination);
            printf("\nGate: %s", foundFlight->gate);
            printf("\nArrival Time: %s", foundFlight->arrivalTime);
            printf("\nDeparture Time: %s\n", foundFlight->departureTime);
        } else {
            printf("\nFlight not found.\n");
        }
    } else if (choice == 3) {
        printf("\nFlight List:\n");
        struct flight* temp = headFlight;
        while (temp != NULL) {
            printf("\nID: %d", temp->id);
            printf("\nFlight Number: %s", temp->flightNumber);
            printf("\nDestination: %s", temp->destination);
            printf("\nGate: %s", temp->gate);
            printf("\nArrival Time: %s", temp->arrivalTime);
            printf("\nDeparture Time: %s\n", temp->departureTime);
            temp = temp->next;
        }
    } else {
        printf("\nInvalid choice.\n");
    }
}




void deleteFlight(int id) {
    // Search for the flight by ID in the hash table
    struct flight* foundFlight = (struct flight*)findInHashTable(&flightTable, id);

    if (foundFlight == NULL) {
        printf("Flight with ID %d not found.\n", id);
        return;
    }

    // Remove the flight from the linked list
    struct flight* current = headFlight;
    struct flight* prev = NULL;

    while (current != NULL) {
        if (current->id == id) {
            if (prev == NULL) {
                // The flight to be deleted is the head of the list
                headFlight = current->next;
            } else {
                prev->next = current->next;
            }
            free(current);
            printf("Flight with ID %d has been deleted.\n", id);
            break;
        }
        prev = current;
        current = current->next;
    }

    // Remove the flight from the hash table
    removeFromHashTable(&flightTable, id);
    saveFlightsToFile(); // You can save the updated data to a file if needed
}

///////////EmployeeFunctions\\\\\\\\\\\\\\/



void addEmployee() {
    struct employee *newEmployee = (struct employee *)malloc(sizeof(struct employee));
    if (newEmployee == NULL) {
        perror("Memory allocation error");
        return;
    }

    printf("\nEnter employee ID: ");
    scanf("%d", &newEmployee->id);

    // Check if employee already exists using hash table
    if (findInHashTable(&employeeTable, newEmployee->id) != NULL) {
        printf("Employee with ID %d already exists.\n", newEmployee->id);
        free(newEmployee);
        return;
    }

    printf("Enter employee first name: ");
    scanf(" %[^\n]s", newEmployee->firstName);  
    printf("Enter employee last name: ");
    scanf(" %[^\n]s", newEmployee->lastName);
    printf("Enter contact number: ");
    scanf(" %[^\n]s", newEmployee->contactNumber);
    printf("Enter email: ");
    scanf(" %[^\n]s", newEmployee->email);
    printf("Enter role: ");
    scanf(" %[^\n]s", newEmployee->role);

    // Insert into linked list
    newEmployee->next = headEmployee;
    headEmployee = newEmployee;

    // Insert into hash table
    insertIntoHashTable(&employeeTable, newEmployee->id, newEmployee);

    printf("\nEmployee added successfully.\n");
    saveEmployeesToFile();
}


void updateEmployee(int id) {
    struct employee* foundEmployee = (struct employee*)findInHashTable(&employeeTable, id);

    if (foundEmployee == NULL) {
        printf("Employee with ID %d not found.\n", id);
        return;
    }

    int choice;
    char input[50];

    while (1) {
        // Display current information
        printf("\nCurrent Information for Employee with ID %d:\n", id);
        printf("1. First Name: %s\n", foundEmployee->firstName);
        printf("2. Last Name: %s\n", foundEmployee->lastName);
        printf("3. Contact Number: %s\n", foundEmployee->contactNumber);
        printf("4. Email: %s\n", foundEmployee->email);
        printf("5. Role: %s\n", foundEmployee->role);
        printf("6. Update All\n");
        printf("7. Finish updating\n");

        printf("\nSelect the attribute to update (1-7): ");
        scanf("%d", &choice);
        while (getchar() != '\n'); // Clear the input buffer

        if (choice >= 1 && choice <= 5 || choice == 6) {
            if (choice == 1 || choice == 6) {
                printf("Enter new first name: ");
                scanf(" %[^\n]s", input);
                strcpy(foundEmployee->firstName, input);
            }
            if (choice == 2 || choice == 6) {
                printf("Enter new last name: ");
                scanf(" %[^\n]s", input);
                strcpy(foundEmployee->lastName, input);
            }
            if (choice == 3 || choice == 6) {
                printf("Enter new contact number: ");
                scanf(" %[^\n]s", input);
                strcpy(foundEmployee->contactNumber, input);
            }
            if (choice == 4 || choice == 6) {
                printf("Enter new email: ");
                scanf(" %[^\n]s", input);
                strcpy(foundEmployee->email, input);
            }
            if (choice == 5 || choice == 6) {
                printf("Enter new role: ");
                scanf(" %[^\n]s", input);
                strcpy(foundEmployee->role, input);
            }
            if (choice == 6) {
                printf("All attributes updated.\n");
            }
        } else if (choice == 7) {
            printf("Finished updating employee information.\n");
            saveEmployeesToFile(); // Save updated data to file
            return;
        } else {
            printf("Invalid choice, please try again.\n");
        }
    }
}



void displayEmployees() {
    int choice, idSearch;
    char nameSearch[50];

    printf("Choose an option:\n");
    printf("1. Search by Name\n");
    printf("2. Search by ID\n");
    printf("3. Show All\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    if (choice == 1) {
        printf("Enter Name to search: ");
        scanf(" %[^\n]s", nameSearch); // Read a string with spaces
        struct employee* temp = headEmployee;
        while (temp != NULL) {
            if (strstr(temp->firstName, nameSearch) != NULL || strstr(temp->lastName, nameSearch) != NULL) {
                // Display employee details
                printf("\nID: %d", temp->id);
                printf("\nFirst Name: %s", temp->firstName);
                printf("\nLast Name: %s", temp->lastName);
                printf("\nContact Number: %s", temp->contactNumber);
                printf("\nEmail: %s", temp->email);
                printf("\nRole: %s\n", temp->role);
            }
            temp = temp->next;
        }
    } else if (choice == 2) {
        printf("Enter ID to search: ");
        scanf("%d", &idSearch);
        struct employee* foundEmployee = (struct employee*)findInHashTable(&employeeTable, idSearch);
        if (foundEmployee != NULL) {
            // Display employee details
            printf("\nID: %d", foundEmployee->id);
            printf("\nFirst Name: %s", foundEmployee->firstName);
            printf("\nLast Name: %s", foundEmployee->lastName);
            printf("\nContact Number: %s", foundEmployee->contactNumber);
            printf("\nEmail: %s", foundEmployee->email);
            printf("\nRole: %s\n", foundEmployee->role);
        } else {
            printf("\nEmployee not found.\n");
        }
    } else if (choice == 3) {
        struct employee* temp = headEmployee;
        while (temp != NULL) {
            // Display employee details
            printf("\nID: %d", temp->id);
            printf("\nFirst Name: %s", temp->firstName);
            printf("\nLast Name: %s", temp->lastName);
            printf("\nContact Number: %s", temp->contactNumber);
            printf("\nEmail: %s", temp->email);
            printf("\nRole: %s\n", temp->role);
            temp = temp->next;
        }
    } else {
        printf("\nInvalid choice.\n");
    }
}


void deleteEmployee(int id) {
    struct employee* foundEmployee = (struct employee*)findInHashTable(&employeeTable, id);

    if (foundEmployee == NULL) {
        printf("Employee with ID %d not found.\n", id);
        return;
    }

    // Remove employee from the linked list
    struct employee* current = headEmployee, *prev = NULL;
    while (current != NULL) {
        if (current->id == id) {
            if (prev == NULL) {
                headEmployee = current->next; // The employee to delete is at the head
            } else {
                prev->next = current->next; // Remove employee from the middle or end
            }
            free(current); // Free the memory allocated for the employee
            break;
        }
        prev = current;
        current = current->next;
    }

    // Remove the employee from the hash table
    removeFromHashTable(&employeeTable, id);
        printf("Employee with ID %d was deleted.\n", id);

    saveEmployeesToFile(); // Save updated data to file
}


void addTicket() {
    struct ticket *newTicket = (struct ticket *)malloc(sizeof(struct ticket));
    if (newTicket == NULL) {
        perror("Memory allocation error");
        return;
    }

    printf("\nEnter ticket number: ");
    scanf("%d", &newTicket->ticketNumber);

    // Check if ticket already exists using hash table
    if (findInHashTable(&ticketTable, newTicket->ticketNumber) != NULL) {
        printf("Ticket with number %d already exists.\n", newTicket->ticketNumber);
        free(newTicket);
        return;
    }

    printf("Enter passenger ID: ");
    scanf("%d", &newTicket->passengerId);
    printf("Enter flight ID: ");
    scanf("%d", &newTicket->flightId);
    printf("Enter seat number: ");
    scanf(" %[^\n]s", newTicket->seatNumber);

    // Insert into linked list
    newTicket->next = headTicket;
    headTicket = newTicket;

    // Insert into hash table
    insertIntoHashTable(&ticketTable, newTicket->ticketNumber, newTicket);

    printf("\nTicket added successfully.\n");
    saveTicketsToFile();
}

void updateTicket(int ticketNumber) {
    struct ticket* foundTicket = (struct ticket*)findInHashTable(&ticketTable, ticketNumber);

    if (foundTicket == NULL) {
        printf("Ticket with number %d not found.\n", ticketNumber);
        return;
    }

    int choice;
    char input[50];
    int newIntValue; 

    while (1) {
        // Display current ticket information
        printf("\nCurrent Ticket Information:\n");
        printf("1. Passenger ID: %d\n", foundTicket->passengerId);
        printf("2. Flight ID: %d\n", foundTicket->flightId);
        printf("3. Seat Number: %s\n", foundTicket->seatNumber);
        printf("4. Update All\n");
        printf("5. Finish updating\n");

        printf("\nSelect the attribute to update (1-5): ");
        scanf("%d", &choice);
        while (getchar() != '\n'); // Clear the input buffer

        if (choice >= 1 && choice <= 3 || choice == 4) {
            if (choice == 1 || choice == 4) {
                printf("Enter new passenger ID: ");
                scanf("%d", &newIntValue);
                foundTicket->passengerId = newIntValue;
            }
            if (choice == 2 || choice == 4) {
                printf("Enter new flight ID: ");
                scanf("%d", &newIntValue);
                foundTicket->flightId = newIntValue;
            }
            if (choice == 3 || choice == 4) {
                printf("Enter new seat number: ");
                scanf(" %[^\n]s", input);
                strcpy(foundTicket->seatNumber, input);
            }
            if (choice == 4) {
                printf("All attributes updated.\n");
            }
        } else if (choice == 5) {
            printf("Finished updating ticket information.\n");
            saveTicketsToFile(); // Save updated data to file
            return;
        } else {
            printf("Invalid choice, please try again.\n");
        }
    }
}



void deleteTicket(int ticketNumber) {
    struct ticket* foundTicket = (struct ticket*)findInHashTable(&ticketTable, ticketNumber);

    if (foundTicket == NULL) {
        printf("Ticket with number %d not found.\n", ticketNumber);
        return;
    }

    // Remove ticket from the linked list
    struct ticket* current = headTicket, *prev = NULL;
    while (current != NULL) {
        if (current->ticketNumber == ticketNumber) {
            if (prev == NULL) {
                headTicket = current->next;
            } else {
                prev->next = current->next;
            }
            free(current);
            break;
        }
        prev = current;
        current = current->next;
    }

    // Remove the ticket from the hash table
    removeFromHashTable(&ticketTable, ticketNumber);
    printf("Ticket with number %d was deleted.\n", ticketNumber);

    saveTicketsToFile();
}

void displayTickets() {
    int choice, ticketNumberSearch, passengerIdSearch;

    printf("Choose an option:\n");
    printf("1. Search by Ticket Number\n");
    printf("2. Search by Passenger ID\n");
    printf("3. Show All\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    if (choice == 1) {
        printf("Enter Ticket Number to search: ");
        scanf("%d", &ticketNumberSearch);
        struct ticket* temp = headTicket;
        while (temp != NULL) {
            if (temp->ticketNumber == ticketNumberSearch) {
                printf("\nTicket Number: %d", temp->ticketNumber);
                printf("\nPassenger ID: %d", temp->passengerId);
                printf("\nFlight ID: %d", temp->flightId);
                printf("\nSeat Number: %s\n", temp->seatNumber);
            }
            temp = temp->next;
        }
    } else if (choice == 2) {
        printf("Enter Passenger ID to search: ");
        scanf("%d", &passengerIdSearch);
        struct ticket* temp = headTicket;
        while (temp != NULL) {
            if (temp->passengerId == passengerIdSearch) {
                printf("\nTicket Number: %d", temp->ticketNumber);
                printf("\nPassenger ID: %d", temp->passengerId);
                printf("\nFlight ID: %d", temp->flightId);
                printf("\nSeat Number: %s\n", temp->seatNumber);
            }
            temp = temp->next;
        }
    } else if (choice == 3) {
        printf("\nAll Tickets:\n");
        struct ticket* temp = headTicket;
        while (temp != NULL) {
            printf("\nTicket Number: %d", temp->ticketNumber);
            printf("\nPassenger ID: %d", temp->passengerId);
            printf("\nFlight ID: %d", temp->flightId);
            printf("\nSeat Number: %s\n", temp->seatNumber);
            temp = temp->next;
        }
    } else {
        printf("\nInvalid choice.\n");
    }
}

void addAirport() {
    struct airport *newAirport = (struct airport *)malloc(sizeof(struct airport));
    if (newAirport == NULL) {
        perror("Memory allocation error");
        return;
    }

    printf("\nEnter airport ID: ");
    scanf("%d", &newAirport->id);

    // Check if airport already exists using hash table
    if (findInHashTable(&airportTable, newAirport->id) != NULL) {
        printf("Airport with ID %d already exists.\n", newAirport->id);
        free(newAirport);
        return;
    }

    printf("Enter airport code: ");
    scanf(" %[^\n]s", newAirport->code);
    printf("Enter airport name: ");
    scanf(" %[^\n]s", newAirport->name);
    printf("Enter airport location: ");
    scanf(" %[^\n]s", newAirport->location);

    // Insert into linked list
    newAirport->next = headAirport;
    headAirport = newAirport;

    // Insert into hash table
    insertIntoHashTable(&airportTable, newAirport->id, newAirport);

    printf("\nAirport added successfully.\n");
    saveAirportsToFile();
}

void updateAirport(int id) {
    struct airport* foundAirport = (struct airport*)findInHashTable(&airportTable, id);

    if (foundAirport == NULL) {
        printf("Airport with ID %d not found.\n", id);
        return;
    }

    int choice;
    char input[50];

    while (1) {
        // Display current airport information
        printf("\nCurrent Information for Airport ID %d:\n", id);
        printf("1. Code: %s\n", foundAirport->code);
        printf("2. Name: %s\n", foundAirport->name);
        printf("3. Location: %s\n", foundAirport->location);
        printf("4. Update All\n");
        printf("5. Finish updating\n");

        printf("\nSelect the attribute to update (1-5): ");
        scanf("%d", &choice);
        while (getchar() != '\n'); // Clear the input buffer

        if (choice >= 1 && choice <= 3 || choice == 4) {
            if (choice == 1 || choice == 4) {
                printf("Enter new code: ");
                scanf(" %[^\n]s", input);
                strcpy(foundAirport->code, input);
            }
            if (choice == 2 || choice == 4) {
                printf("Enter new name: ");
                scanf(" %[^\n]s", input);
                strcpy(foundAirport->name, input);
            }
            if (choice == 3 || choice == 4) {
                printf("Enter new location: ");
                scanf(" %[^\n]s", input);
                strcpy(foundAirport->location, input);
            }
            if (choice == 4) {
                printf("All attributes updated.\n");
            }
        } else if (choice == 5) {
            printf("Finished updating airport information.\n");
            saveAirportsToFile(); // Save updated data to file
            return;
        } else {
            printf("Invalid choice, please try again.\n");
        }
    }
}


void deleteAirport(int id) {
    struct airport* foundAirport = (struct airport*)findInHashTable(&airportTable, id);

    if (foundAirport == NULL) {
        printf("Airport with ID %d not found.\n", id);
        return;
    }

    // Remove airport from the linked list
    struct airport* current = headAirport, *prev = NULL;
    while (current != NULL) {
        if (current->id == id) {
            if (prev == NULL) {
                headAirport = current->next;
            } else {
                prev->next = current->next;
            }
            free(current);
            break;
        }
        prev = current;
        current = current->next;
    }

    // Remove the airport from the hash table
    removeFromHashTable(&airportTable, id);
    saveAirportsToFile();
}
void displayAirports() {
    int choice, idSearch;
    char nameSearch[50];

    printf("Choose an option:\n");
    printf("1. Search by Name\n");
    printf("2. Search by ID\n");
    printf("3. Show All\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    if (choice == 1) {
        printf("Enter Name to search: ");
        scanf(" %[^\n]s", nameSearch); // Read a string with spaces
        struct airport* temp = headAirport;
        while (temp != NULL) {
            if (strstr(temp->name, nameSearch) != NULL) {
                printf("\nID: %d", temp->id);
                printf("\nCode: %s", temp->code);
                printf("\nName: %s", temp->name);
                printf("\nLocation: %s\n", temp->location);
            }
            temp = temp->next;
        }
    } else if (choice == 2) {
        printf("Enter ID to search: ");
        scanf("%d", &idSearch);
        struct airport* foundAirport = (struct airport*)findInHashTable(&airportTable, idSearch);
        if (foundAirport != NULL) {
            printf("\nID: %d", foundAirport->id);
            printf("\nCode: %s", foundAirport->code);
            printf("\nName: %s", foundAirport->name);
            printf("\nLocation: %s\n", foundAirport->location);
        } else {
            printf("\nAirport not found.\n");
        }
    } else if (choice == 3) {
        printf("\nAirport List:\n");
        struct airport* temp = headAirport;
        while (temp != NULL) {
            printf("\nID: %d", temp->id);
            printf("\nCode: %s", temp->code);
            printf("\nName: %s", temp->name);
            printf("\nLocation: %s\n", temp->location);
            temp = temp->next;
        }
    } else {
        printf("\nInvalid choice.\n");
    }
}



void displayMainMenu() {
    printf("\n\n--- Airport Management System ---\n");
    printf("\n1. Passengers Menu");
    printf("\n2. Flights Menu");
    printf("\n3. Employees Menu");
    printf("\n4. Tickets Menu");
    printf("\n5. Airports Menu");
    printf("\n6. Exit\n");
    printf("********************\n");

    printf("\n\nEnter your choice: ");
}

void displayPassengersMenu() {
    printf("\n\n--- Passengers Menu ---\n");
    printf("\n1. Add Passenger");
    printf("\n2. Delete Passenger");
    printf("\n3. Update Passenger");
    printf("\n4. Display Passengers");
    printf("\n5. Back\n");
    printf("********************\n");
    printf("\n\nEnter your choice: ");
}

void displayFlightsMenu() {
    printf("\n*** Flights Menu ***\n");
    printf("1. Add new flight\n");
    printf("2. Update flight information\n");
    printf("3. Delete flight\n");
    printf("4. Display all flights\n");
    printf("5. Back to main menu\n");
    printf("********************\n");
}

void displayEmployeesMenu() {
    printf("\n\n--- Employees Menu ---\n");
    printf("\n1. Add Employee");
    printf("\n2. Update Employee");
    printf("\n3. Delete Employee");
    printf("\n4. Display Employees");
    printf("\n5. Back\n");
    printf("********************\n");
    printf("\n\nEnter your choice: ");
}

void displayTicketsMenu() {
    printf("\n\n--- Tickets Menu ---\n");
    printf("\n1. Add Ticket");
    printf("\n2. Delete Ticket");
    printf("\n3. Update Ticket");
    printf("\n4. Display Tickets");
    printf("\n5. Back\n");
    printf("********************\n");
    printf("\n\nEnter your choice: ");
}

void displayAirportsMenu() {
    printf("\n\n--- Airports Menu ---\n");
    printf("\n1. Add Airport");
    printf("\n2. Update Employee");
    printf("\n3. Delete Airport");
    printf("\n4. Display Airports");
    printf("\n5. Back\n");
    printf("********************\n");
    printf("\n\nEnter your choice: ");
}

void menu() {
    
    initializeHashTable(&passengerTable);
    initializeHashTable(&flightTable);
    initializeHashTable(&employeeTable);
    initializeHashTable(&ticketTable);
    initializeHashTable(&airportTable);
    
  loadPassengersFromFile();
    loadFlightsFromFile();
    loadEmployeesFromFile();
    loadTicketsFromFile();
    loadAirportsFromFile();
    
    int mainMenuChoice, passengersMenuChoice, flightsMenuChoice, employeesMenuChoice, ticketsMenuChoice, airportsMenuChoice;
    char name[50], flightNumber[20], destination[50],  location[50];

    int id, ticketNumber, passengerId, flightId;
pthread_t thread_id;

    displayMainMenu();

    while (1) {
        scanf("%d", &mainMenuChoice);

        switch (mainMenuChoice) {
            case 1:
            
                
                
                while (1) {
                    pthread_create(&thread_id, NULL, managePassengers, NULL);
                pthread_join(thread_id, NULL);
                    displayPassengersMenu();
                    scanf("%d", &passengersMenuChoice);

                    switch (passengersMenuChoice) {
                        case 1:
                              
                            addPassenger();
                            break;
                        case 2:
                            printf("\nEnter passenger ID: ");
                            scanf("%d", &id);
                            deletePassenger(id);
                            break;
                        case 3:
                           int passengerIdToUpdate;
printf("Enter the ID of the passenger you want to update: ");
scanf("%d", &passengerIdToUpdate);
updatePassenger(passengerIdToUpdate);
                            break;
                        case 4:
                            displayPassengers();
                            break;
                        case 5:
                            displayMainMenu();
                            break;
                        default:
                            printf("\nInvalid choice. Please try again.\n");
                    }
                    if (passengersMenuChoice == 5) {
                        break;
                    }
                }
                break;
            case 2:
            
              
    while (1) {
        pthread_create(&thread_id, NULL, manageFlights, NULL);
                pthread_join(thread_id, NULL);
        displayFlightsMenu();
        scanf("%d", &flightsMenuChoice);

        switch (flightsMenuChoice) {
            case 1:
                {
                    addFlight();
                }
                break;

            case 2:
                {
                    int flightIdToUpdate;
                    printf("\nEnter flight ID to update: ");
                    scanf("%d", &flightIdToUpdate);
                    updateFlight(flightIdToUpdate);
                }
                break;

            case 3:
                {
                    int idToDelete;
                    printf("\nEnter flight ID to delete: ");
                    scanf("%d", &idToDelete);
                    deleteFlight(idToDelete);
                }
                break;

            case 4:
                displayFlights();
                break;

            case 5:
                displayMainMenu();
                break;

            default:
                printf("\nInvalid choice. Please try again.\n");
                displayMainMenu();
                break;
        }

        if (flightsMenuChoice == 5) {
            break;
        }
    }
    break;
            case 3:
            
                
    while (1) {
        pthread_create(&thread_id, NULL, manageEmployees, NULL);
                pthread_join(thread_id, NULL);
        displayEmployeesMenu();
        scanf("%d", &employeesMenuChoice);

        switch (employeesMenuChoice) {
            case 1:
                
                
                addEmployee();
                break;

            case 2:
                int empId;  
        printf("\nEnter the Employee ID to update: ");
        scanf("%d", &empId);
        updateEmployee(empId);
                break;

            case 3:
                int empIdToDelete;  
        printf("\nEnter employee ID to delete: ");
        scanf("%d", &empIdToDelete);
        deleteEmployee(empIdToDelete);
                break;

            case 4:
                displayEmployees();
                break;

            case 5:
                displayMainMenu();
                break;

            default:
                printf("\nInvalid choice. Please try again.\n");
        }

        if (employeesMenuChoice == 5) {
            break;  
        }
    }
    break;
            case 4:
            pthread_create(&thread_id, NULL, manageTickets, NULL);
                pthread_join(thread_id, NULL);
    while (1) {
        displayTicketsMenu();
        scanf("%d", &ticketsMenuChoice);

        switch (ticketsMenuChoice) {
            case 1:
               

                addTicket();
                break;
            case 2:
                int ticketNumberToDelete;
                printf("\nEnter ticket number to delete: ");
                scanf("%d", &ticketNumberToDelete);
                deleteTicket(ticketNumberToDelete);
                break;
            case 3:
                int ticketNumberToUpdate;
                printf("\nEnter ticket number to update: ");
                scanf("%d", &ticketNumberToUpdate);
                updateTicket(ticketNumberToUpdate);
                break;
            case 4:
                displayTickets();
                break;
            case 5:
                displayMainMenu();
                break;
            default:
                printf("\nInvalid choice. Please try again.\n");
        }

        if (ticketsMenuChoice == 5) {
            break;
        }
    }
    break;

case 5:
    while (1) {
        displayAirportsMenu();
        scanf("%d", &airportsMenuChoice);

        switch (airportsMenuChoice) {
            case 1:
                

                addAirport();
                break;
            case 2:
                int airportIdToUpdate;
                printf("\nEnter airport ID to update: ");
                scanf("%d", &airportIdToUpdate);
                updateAirport(airportIdToUpdate);
                break;
            case 3:
                int airportIdToDelete;
                printf("\nEnter airport ID to delete: ");
                scanf("%d", &airportIdToDelete);
                deleteAirport(airportIdToDelete);
                break;
            case 4:
                displayAirports();
                break;
            case 5:
                displayMainMenu();
                break;
            default:
                printf("\nInvalid choice. Please try again.\n");
        }

        if (airportsMenuChoice == 5) {
            break;
        }
    }
    break;
            
            case 6:
                printf("\nExiting program...\n");
                exit(0);
            default:
                printf("\nInvalid choice. Please try again.\n");
        }
    }
}

int main() {
    menu();
    return 0;
}


//threading

void* managePassengers(void* data) {
    printf("Passenger Management Thread\n");
    pthread_exit(NULL);
}

void* manageFlights(void* data) {
    printf("Flight Management Thread\n");
    pthread_exit(NULL);
}

void* manageEmployees(void* data) {
    printf("Employee Management Thread\n");
    pthread_exit(NULL);
}

void* manageTickets(void* data) {
    printf("Ticket Management Thread\n");
    pthread_exit(NULL);
}